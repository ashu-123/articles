𝟯 𝗰𝗼𝗼𝗹 𝗳𝗲𝗮𝘁𝘂𝗿𝗲𝘀 𝗶𝗻 𝗝𝗗𝗞 𝟮𝟯 𝗲𝗻𝗵𝗮𝗻𝗰𝗶𝗻𝗴 𝗱𝗲𝘃𝗲𝗹𝗼𝗽𝗲𝗿 𝗲𝘅𝗽𝗲𝗿𝗶𝗲𝗻𝗰𝗲 & 𝗽𝗿𝗼𝗱𝘂𝗰𝘁𝗶𝘃𝗶𝘁𝘆

𝗝𝗮𝘃𝗮 𝟮𝟯 reached 𝘎𝘦𝘯𝘦𝘳𝘢𝘭 𝘈𝘷𝘢𝘪𝘭𝘢𝘣𝘪𝘭𝘪𝘵𝘺 on 17th Sept, 2024 & shipped a truckload of features. While there are numerous enhancements added to the JDK, let's focus on the JEPs included from 𝘗𝘳𝘰𝘫𝘦𝘤𝘵 𝘈𝘮𝘣𝘦𝘳.


𝗝𝗘𝗣 𝟰𝟳𝟳: 𝗜𝗺𝗽𝗹𝗶𝗰𝗶𝘁𝗹𝘆 𝗱𝗲𝗰𝗹𝗮𝗿𝗲𝗱 𝗰𝗹𝗮𝘀𝘀𝗲𝘀 & 𝗶𝗻𝘀𝘁𝗮𝗻𝗰𝗲 𝗺𝗮𝗶𝗻 𝗺𝗲𝘁𝗵𝗼𝗱𝘀

I remember well having a hard time dealing with the notoriously verbose syntax of writing just a basic "Hello World!" program the first time. It forced to grasp concepts which weren't even required on day-1. The public/private access modifier & their role in encapsulating units of code, the String[] args parameter that allows the user to pass arguments, the static modifier & how it's part of Java's class-and-object model. All this was hard to reason, especially to the beginners.

The motivation for this JEP is to help programmers that are new to Java by introducing concepts in the right order, starting with the more fundamental ones. 
This is done by:-
• Hiding any unnecessary details until they are useful in larger programs
• The launch protocol allowing instance main methods, non-static & don't need a public modifier, nor a String[] parameter
• Implicitly declared classes, automatically import useful methods for textual input & output, thereby avoiding the mysterious System.out.println.


𝗝𝗘𝗣 𝟰𝟳𝟲: 𝗠𝗼𝗱𝘂𝗹𝗲 𝗜𝗺𝗽𝗼𝗿𝘁 𝗗𝗲𝗰𝗹𝗮𝗿𝗮𝘁𝗶𝗼𝗻𝘀

More often than not, our classes are loaded up with a lot of import statements where the imports take up just as much space as the code itself. Many teams prefer single-type imports, however, in early-stage situations (when trying out a new feature, or in JShell) a more convenient approach could come in handy.

This JEP introduces module import declarations, and they have the form 𝘪𝘮𝘱𝘰𝘳𝘵 𝘮𝘰𝘥𝘶𝘭𝘦 𝘔;.

A module import declaration imports all of the public top-level classes and interfaces in the packages exported by the 𝘮𝘰𝘥𝘶𝘭𝘦 𝘔 to the current module. Any indirect exports by the module M will also be made available by a module import declaration.

For example, if you write 𝘪𝘮𝘱𝘰𝘳𝘵 𝘮𝘰𝘥𝘶𝘭𝘦 𝘫𝘢𝘷𝘢.𝘴𝘲𝘭, it means your class will be able to read classes and interfaces from the packages 𝘫𝘢𝘷𝘢.𝘴𝘲𝘭 𝘢𝘯𝘥 𝘫𝘢𝘷𝘢𝘹.𝘴𝘲𝘭 (because they are exported by the module java.sql). On top of that, because java.sql pulls in three other modules transitively, any exported packages from those modules will also be available.


𝗝𝗘𝗣 𝟰𝟱𝟱: 𝗣𝗿𝗶𝗺𝗶𝘁𝗶𝘃𝗲 𝘁𝘆𝗽𝗲𝘀 𝗶𝗻 𝗣𝗮𝘁𝘁𝗲𝗿𝗻𝘀, 𝗶𝗻𝘀𝘁𝗮𝗻𝗰𝗲𝗢𝗳 𝗮𝗻𝗱 𝘀𝘄𝗶𝘁𝗰𝗵

This JEP proposes to support primitive types in all pattern contexts, & to extend instanceof & switch to work with all primitive types. The switch statement/expression now supports byte, short, char, int, boolean, float, double & long.

hashtag#java hashtag#jdk23 hashtag#ProjectAmber
